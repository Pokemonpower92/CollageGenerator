// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: imageset.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createImageset = `-- name: CreateImageset :one
INSERT INTO image_sets (
  id, name, description, created_at, updated_at
) VALUES (
  uuid_generate_v4(), $1, $2, NOW(), NOW() 
)
RETURNING db_id, id, name, description, created_at, updated_at
`

type CreateImagesetParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateImageset(ctx context.Context, arg CreateImagesetParams) (*ImageSet, error) {
	row := q.db.QueryRow(ctx, createImageset, arg.Name, arg.Description)
	var i ImageSet
	err := row.Scan(
		&i.DbID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getImageset = `-- name: GetImageset :one
SELECT db_id, id, name, description, created_at, updated_at FROM image_sets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetImageset(ctx context.Context, id uuid.UUID) (*ImageSet, error) {
	row := q.db.QueryRow(ctx, getImageset, id)
	var i ImageSet
	err := row.Scan(
		&i.DbID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listimage_sets = `-- name: Listimage_sets :many
SELECT db_id, id, name, description, created_at, updated_at FROM image_sets
ORDER BY name
`

func (q *Queries) Listimage_sets(ctx context.Context) ([]*ImageSet, error) {
	rows, err := q.db.Query(ctx, listimage_sets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ImageSet
	for rows.Next() {
		var i ImageSet
		if err := rows.Scan(
			&i.DbID,
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
